// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts     Account[]
  products     Product[]     @relation("ownerProducts")
  favorites    Product[]     @relation("favoriteProducts")
  reservations Reservation[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  classification Float
  note           String
  imageSrc       String
  point          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  userId        String        @db.ObjectId
  user          User          @relation("ownerProducts", fields: [userId], references: [id], onDelete: Cascade)
  favoritedById String        @db.ObjectId
  favoritedBy   User          @relation("favoriteProducts", fields: [favoritedById], references: [id])
  categoryId    String        @db.ObjectId
  category      Category      @relation(fields: [categoryId], references: [id])
  subCategoryId String        @db.ObjectId
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])
  siteId        String        @db.ObjectId
  site          Site          @relation(fields: [siteId], references: [id])
  reservations  Reservation[]
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  products      Product[]
  subCategories SubCategory[]
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  products   Product[]
  categoryId String    @db.ObjectId
  category   Category  @relation(fields: [categoryId], references: [id])
}

model Site {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  city      String
  address   String
  lat       String
  lng       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Reservation {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPoint Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  buyerId   String  @db.ObjectId
  buyer     User    @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}
